openapi: 3.0.0
info:
  title: Library API
  version: "1.0.0"
  description: API documentation for the Library API, including endpoints for books and user authentication.
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /api/books:
    get:
      summary: Get books
      description: Returns an array of books. Supports optional filtering by book_id, title, and author.
      parameters:
        - in: query
          name: book_id
          schema:
            type: integer
          description: Filter books by their unique ID.
        - in: query
          name: title
          schema:
            type: string
          description: Filter books by title (partial match).
        - in: query
          name: author
          schema:
            type: string
          description: Filter books by author (partial match).
      responses:
        "200":
          description: Books successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        "404":
          description: No books found matching the criteria.
        "500":
          description: Error retrieving data from the database.

  /users/signup:
    post:
      summary: Signup a new user
      description: Creates a new user account and returns a JWT token upon successful registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupUserRequest'
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Signup failed due to invalid input or an existing user.

  /users/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Login failed due to incorrect credentials.

  /protected/hello:
    get:
      summary: Protected hello endpoint
      description: Returns a greeting message for authenticated users. Requires a valid JWT token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Greeting message returned successfully.
          content:
            text/plain:
              schema:
                type: string
                example: "Hello, JohnDoe!"
        "401":
          description: Unauthorized access due to invalid or missing JWT token.

components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          example: "The Great Gatsby"
        author:
          type: string
          example: "F. Scott Fitzgerald"
        is_available:
          type: boolean
          example: true

    SignupUserRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"
        username:
          type: string
          example: "JohnDoe"

    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
